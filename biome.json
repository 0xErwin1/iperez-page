{
  "$schema": "https://biomejs.dev/schemas/1.8.3/schema.json",
  "files": {
    "ignore": ["**/*.jpeg", "**/*.pdf", "**/*.svg", "**/*.png", "**/*.jpg", "**/*.webp"]
  },
  "formatter": {
    "enabled": true,
    "formatWithErrors": false,
    "indentStyle": "space",
    "indentWidth": 2,
    "lineEnding": "lf",
    "lineWidth": 110,
    "attributePosition": "auto"
  },
  "organizeImports": { "enabled": true },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": false,
      "complexity": {
        "noBannedTypes": "error",
        "noUselessThisAlias": "error",
        "noUselessTypeConstraint": "error",
        "useLiteralKeys": "error"
      },
      "correctness": {
        "noInvalidConstructorSuper": "error",
        "noInvalidUseBeforeDeclaration": "off",
        "noPrecisionLoss": "off",
        "noUnsafeFinally": "error",
        "noUnusedLabels": "error",
        "noUnusedVariables": "off",
        "useArrayLiterals": "off",
        "useIsNan": "error",
        "noUnusedImports": "warn"
      },
      "security": { "noGlobalEval": "error" },
      "style": {
        "noInferrableTypes": "off",
        "noNamespace": "off",
        "noNonNullAssertion": "warn",
        "noVar": "error",
        "useAsConstAssertion": "error",
        "useConsistentArrayType": {
          "level": "error",
          "options": { "syntax": "shorthand" }
        },
        "useConst": "error",
        "useForOf": "off",
        "useNamingConvention": {
          "level": "error",
          "options": {
            "strictCase": false,
            "conventions": [
              {
                "selector": { "kind": "enumMember" },
                "formats": ["camelCase", "CONSTANT_CASE"]
              },
              {
                "selector": { "kind": "interface" },
                "formats": ["PascalCase"]
              },
              { "selector": { "kind": "enum" }, "formats": ["PascalCase"] },
              {
                "selector": { "kind": "typeParameter" },
                "formats": ["PascalCase"]
              },
              {
                "selector": { "kind": "variable" },
                "formats": ["camelCase", "CONSTANT_CASE", "PascalCase"]
              },
              {
                "selector": { "kind": "variable" },
                "match": "_?([^_]*)",
                "formats": ["camelCase"]
              },
              {
                "selector": { "kind": "function" },
                "match": "_?([^_]*)",
                "formats": ["camelCase"]
              },
              {
                "selector": { "kind": "objectLiteralProperty" },
                "formats": ["camelCase", "CONSTANT_CASE", "PascalCase", "snake_case"]
              },
              {
                "selector": { "kind": "typeProperty"},
                "formats": ["camelCase", "CONSTANT_CASE", "PascalCase", "snake_case"]
              },
              {
                "selector": { "kind": "classProperty" },
                "formats": ["camelCase", "CONSTANT_CASE", "PascalCase", "snake_case"]
              }
            ]
          }
        },
        "useShorthandFunctionType": "error",
        "useSingleVarDeclarator": "error"
      },
      "suspicious": {
        "noAssignInExpressions": "error",
        "noConsoleLog": "error",
        "noDebugger": "error",
        "noDoubleEquals": "off",
        "noEmptyBlockStatements": "error",
        "noEmptyInterface": "error",
        "noExplicitAny": "off",
        "noExtraNonNullAssertion": "error",
        "noFallthroughSwitchClause": "off",
        "noMisleadingInstantiator": "error",
        "useAwait": "off",
        "useNamespaceKeyword": "error",
        "useValidTypeof": "off"
      }
    },
    "ignore": ["migrations/*.js", "**/*.jpeg", "**/*.pdf"]
  },
  "javascript": {
    "formatter": {
      "jsxQuoteStyle": "double",
      "quoteProperties": "asNeeded",
      "trailingCommas": "all",
      "semicolons": "always",
      "arrowParentheses": "always",
      "bracketSpacing": true,
      "bracketSameLine": false,
      "quoteStyle": "single",
      "attributePosition": "auto"
    }
  },
  "overrides": [
    {
      "include": ["*.astro"],
      "linter": {
        "rules": {
          "style": {
            "useConst": "off",
            "useImportType": "off"
          }
        }
      }
    },
    {
      "include": ["*.ts", "*.tsx", "*.mts", "*.cts"],
      "linter": {
        "rules": {
          "correctness": {
            "noConstAssign": "off",
            "noGlobalObjectCalls": "off",
            "noInvalidConstructorSuper": "off",
            "noNewSymbol": "off",
            "noSetterReturn": "off",
            "noUndeclaredVariables": "off",
            "noUnreachable": "off",
            "noUnreachableSuper": "off"
          },
          "style": {
            "noArguments": "error",
            "noVar": "error",
            "useConst": "error"
          },
          "suspicious": {
            "noDuplicateClassMembers": "off",
            "noDuplicateObjectKeys": "off",
            "noDuplicateParameters": "off",
            "noFunctionAssign": "off",
            "noImportAssign": "off",
            "noRedeclare": "off",
            "noUnsafeNegation": "off",
            "useGetterReturn": "off",
            "useValidTypeof": "off"
          }
        }
      }
    },
    {
      "include": ["*.ts", "*.tsx", "*.mts", "*.cts"],
      "linter": {
        "rules": {
          "correctness": {
            "noConstAssign": "off",
            "noGlobalObjectCalls": "off",
            "noInvalidConstructorSuper": "off",
            "noNewSymbol": "off",
            "noSetterReturn": "off",
            "noUndeclaredVariables": "off",
            "noUnreachable": "off",
            "noUnreachableSuper": "off"
          },
          "style": {
            "noArguments": "error",
            "noVar": "error",
            "useConst": "error"
          },
          "suspicious": {
            "noDuplicateClassMembers": "off",
            "noDuplicateObjectKeys": "off",
            "noDuplicateParameters": "off",
            "noFunctionAssign": "off",
            "noImportAssign": "off",
            "noRedeclare": "off",
            "noUnsafeNegation": "off",
            "useGetterReturn": "off",
            "useValidTypeof": "off"
          }
        }
      }
    }
  ]
}
